/*메소드로 호출 했을 때의 this는 메소드를 호출한 주체, 메소드를 누가 호출 했는냐, 메소드 명의 '점' 바로 앞에 있는 애가 this 가 된다*/

// ---------- 1. 메소드 ----------
// const a = {
//   b: function () {
//     console.log(this); //{ b: [Function: b] } === a
//   },
// };
// a.b();
// a['b']();
// /*b라고 하는 함수는 a의 프로퍼티이다 즉 프로퍼티에 함수를 할당한 것이다 그런데 그 함수를, b함수를 a 객체의 메소드로써 호출했다 라는 말이된다 그러니까 앞에 점이있으면 (=== a.b) 그 앞에 객체의 메서드로써 이 b를 호출했다 라는 말이 된다 클래스와 상관없이 객체와 관련된 동작만 하면 메소드 라는 것이다 b는 원래 함수인데 어떤 객체와 관련된 동작을 하면 그때는 메소드로 부르겠다 라는 말이다 이때 '어떤객체'가 바로 점 앞에 있는 것이다 (=== a)*/

// // ---------- 2. 메소드 ver2 ----------
// const c = {
//   d: {
//     e: function () {
//       console.log(this); // { e: [Function: e] } === c.d
//     },
//   },
// };
// c.d.e();
// c.d['e']();
// c['d'].e();
// c['d']['e']();
/*다양한 방법으로 메소드를 호출 할 수있다 하지만 결과는 모두 같다 */

// ---------- 2. 메소드 내부함수에서 우회법 ----------
var f = 10;
var obj = {
  f: 20,
  g: function () {
    console.log(this.f);

    function h() {
      console.log(this.f);
    }
    h();
  },
};
obj.g();
